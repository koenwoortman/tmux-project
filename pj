#!/usr/bin/env bash

SCRIPT_NAME=${0##*/}
VERSION=0.2.0
PROJECT_DIR=${TMUX_PROJECT_DIR:-"$HOME/.config/tmux-project"}


# Print the script usage
usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <project name>

options:
  -c, --close     [PROJECT]   Close a tmux session
  -d, --delete     PROJECT    Delete a new tmux-project file
  -e, --edit       PROJECT    Edit a tmux-project file
  -h, --help                  Display this help message
  -l, --list                  List known tmux-projects
  -s, --save                  Save current session as tmux-project
  -v, --version               Display the version number

EOF
}


# Initial script setup
tmux_project_init() {
  # Create the project dir if it doesn't exists yet
  mkdir -p "$PROJECT_DIR"
}


# Print an error message
#
# $1 - error message
error() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
  printf "Try '%s --help' for more information.\\n" "${SCRIPT_NAME}"
  exit 1
} >&2


# Print an info message
#
# $1 - info message
info() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
}


# Print the script version
#
# $1 - error message
version() {
  cat << EOF
${SCRIPT_NAME} ${VERSION}

EOF
}


# Throw an error when not running inside tmux
require_tmux_session() {
  if [[ -z "$TMUX" ]]; then
    error "Only available inside a tmux session"
  fi
}


# Check whether a tmux session exists
#
# $1 - session name
session_exists() {
  local session=$1

  return 0
}

# Launch the editor
#
# $@ - file names to edit
edit() {
  ${EDITOR:-vi} $@
}

# Return the format for parsing tmux window details
window_format() {
  local format
  format+="#{window_name}"
  echo "$format"
}


# Return tmux window information
dump_tmux_windows() {
  tmux list-windows -F "$( window_format )"
}


# Print a tmux window config
capture_tmux_windows() {
  local config=""
  local windows=$( dump_tmux_windows )

  for window in $windows; do
    config+="window $window\n"
  done

  echo "${config}"
}


# Edit a new project bootstrap file
#
# $1 - file name to edit
edit_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    error "specify a project: ${SCRIPT_NAME} --edit <project name>"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    echo "'$project_name' does not exists in $PROJECT_DIR"
  fi

  edit "$PROJECT_DIR/$project_name"
}


# List available project bootstrap files
list_projects() {
  for file in $( echo "$PROJECT_DIR/*" ); do
    basename "$file"
  done
}


# Save the current tmux session to a bootstrap file
save_project() {
  require_tmux_session

  local project_name=$( tmux display-message -p '#S' )

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' already exists in $PROJECT_DIR"
  fi

  local windows=$( capture_tmux_windows )
  echo -e "$windows" >> "$PROJECT_DIR/$project_name"

  echo "$SCRIPT_NAME: saved '$project_name'"
}


# Delete a project bootstrap file
#
# $1 - bootstrap file to delete
delete_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    error "specify a project name"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' doesn't exist"
  fi

  info "you're about to delete $project_name"
  read -p "Are you sure? (y/N) " -n 1 -r
  echo    # Move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm "$PROJECT_DIR/$project_name"
  fi
}


# Close a tmux session
#
# $1 - tmux session to close (optional)
close_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    require_tmux_session

    tmux kill-session
  else
    tmux kill-session -t "$project_name"
  fi
}


# Open bootstrapped tmux sessions
#
# $1 - name of bootstrap file
tmux_init() {
  local first_window=true
  local project_name="$1"
  local current_window=""

  # Create a tmux window
  #
  # $1 - name of the window
  window() {
    if [ "$first_window" = true ] ; then
      tmux rename-window -t "$project_name:1" "$1"
      first_window=false
    else
      tmux new-window -t "$project_name:" -n "$1"
    fi

    current_window="$1"
  }

  # Run command in the focussed tmux window/pane
  #
  # $1 - command to run
  run() {
    tmux send-keys -t "$project_name:$current_window" "$@" C-m
  }

  TMUX='' tmux new-session -d -s "$project_name"
  file="$PROJECT_DIR/$1"

  while IFS= read -r line; do
    eval $line
  done < "$file"

  unset -f window
  unset -f run
}


# Open bootstrapped tmux sessions
#
# $@ - names of bootstrap files
open_projects() {
  for arg in "$@"; do
    # Ignore if session already exists
    tmux has-session -t=$arg 2> /dev/null
    if [[ $? -eq 0 ]]; then
      continue;
    fi

    # Create sessions
    if [[ -f "$PROJECT_DIR/$arg" ]]; then
      tmux_init $arg
    else
      TMUX='' tmux new-session -d -s "$arg"
    fi
  done

  # Display the (first) passed session
  if [[ -z "$TMUX" ]]; then
    tmux attach -t "$1"
  else
    tmux switch-client -t "$1"
  fi
}


# Parse arguments
main() {
  local argument=$1

  case "${argument}" in
    '-c' | '--close')
      close_project $2
      ;;
    '-e' | '--edit')
      edit_project $2
      ;;
    '-h' | '--help')
      usage
      ;;
    '-l' | '--list')
      list_projects
      ;;
    '-d' | '--delete')
      delete_project $2
      ;;
    '-s' | '--save')
      save_project $2
      ;;
    '-v' | '--version')
      version
      ;;
    -*)
      error 'Unknown argument'
      ;;
    '')
      error 'Missing argument'
      ;;
    *)
      open_projects $@
      ;;
  esac
}

# Initial script setup
tmux_project_init

# Run the script
main "$@"
