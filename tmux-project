#!/usr/bin/env bash

SCRIPT_NAME=${0##*/}
VERSION=0.2.0
PROJECT_DIR=${TMUX_PROJECT_DIR:-"$HOME/.config/tmux-project"}


# Print the script usage
usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <project name>

options:
  -c, --close     [PROJECT]   Close a tmux session
  -e, --edit       PROJECT    Edit a tmux-project file
  -h, --help                  Display this help message
  -l, --list                  List known tmux-projects
  -n, --new        PROJECT    Create a new tmux-project file
  -r, --remove     PROJECT    Remove a new tmux-project file
  -s, --save                  Save current session as tmux-project
  -v, --version               Display the version number

EOF
}


# Print an error message
#
# $1 - error message
error() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
  printf "Try '%s --help' for more information.\\n" "${SCRIPT_NAME}"
  exit 1
} >&2


# Print the script version
#
# $1 - error message
version() {
  cat << EOF
${SCRIPT_NAME} ${VERSION}

EOF
}


# Throw an error when not running inside tmux
require_tmux_session() {
  if [[ -z "$TMUX" ]]; then
    error "Only available inside a tmux session"
  fi
}


# Launch the editor
#
# $@ - file names to edit
edit() {
  ${EDITOR:-vi} $@
}

# Return the format for parsing tmux window details
window_format() {
  local format
  format+="#{window_name}"
  echo "$format"
}


# Return tmux window information
dump_tmux_windows() {
  tmux list-windows -a -F "$(window_format)"
}


# Print a tmux window config
capture_tmux_windows() {
  local config=''
  local windows=$( dump_tmux_windows )

  local iteration=1
  for window in $windows; do
    if [[ "$iteration" -eq 1 ]]; then
      config="rename-window $window"
    else
      config+="\nnew-window -n $window"
    fi

    iteration=$((iteration + 1))
  done

  echo "${config}"
}


# Create a new project bootstrap file
#
# $1 - file name
new_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    error "specify a project name: ${SCRIPT_NAME} --new <project name>"
  fi

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' already exists in $PROJECT_DIR"
  fi

  touch "$PROJECT_DIR/$project_name"
}


# Edit a new project bootstrap file
#
# $1 - file name to edit
edit_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    error "specify a project: ${SCRIPT_NAME} --edit <project name>"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    echo "'$project_name' does not exists in $PROJECT_DIR"
  fi

  edit "$PROJECT_DIR/$project_name"
}


# List available project bootstrap files
list_projects() {
  for file in $( echo "$PROJECT_DIR/*" ); do
    basename "$file"
  done
}


# Save the current tmux session to a bootstrap file
save_project() {
  require_tmux_session

  local project_name=$( tmux display-message -p '#S' )

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' already exists in $PROJECT_DIR"
  fi

  local windows=$( capture_tmux_windows )
  echo -e "$windows" >> "$PROJECT_DIR/$project_name"

  echo "$SCRIPT_NAME: saved '$project_name'"
}


# Remove a project bootstrap file
#
# $1 - bootstrap file to delete
remove_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    error "specify a project: ${SCRIPT_NAME} --remove <project name>"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' doesn't exists in $PROJECT_DIR"
  fi

  read -p "Are you sure? (y/n) " -n 1 -r
  echo    # Move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm "$PROJECT_DIR/$project_name"
  fi
}


# Close a tmux session
#
# $1 - tmux session to close (optional)
close_project() {
  local project_name=$1

  if [[ -z "$project_name" ]]; then
    require_tmux_session

    tmux kill-session
  else
    tmux kill-session -t "$project_name"
  fi
}


# Open a bootstrapped tmux session
#
# $1 - name of the bootstrap file
open_project() {
  if [[ $# -ne 1 ]]; then
    error "No project specified"
  fi

  local project_name=$1

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' not found in $PROJECT_DIR"
  fi


  if ! tmux has-session -t "$project_name" > /dev/null 2>&1; then
    TMUX='' tmux new-session -d -s "$project_name"
    xargs -L1 tmux < "$PROJECT_DIR/$project_name"
    tmux select-window -t 1
  fi

  if [[ -z "$TMUX" ]]; then
    tmux attach -t "$project_name"
  else
    tmux switch-client -t "$project_name"
  fi
}


# Parse arguments
main() {
  local argument=$1

  case "${argument}" in
    '-c' | '--close')
      close_project $2
      ;;
    '-e' | '--edit')
      edit_project $2
      ;;
    '-h' | '--help')
      usage
      ;;
    '-l' | '--list')
      list_projects
      ;;
    '-n' | '--new')
      new_project $2
      ;;
    '-r' | '--remove')
      remove_project $2
      ;;
    '-s' | '--save')
      save_project $2
      ;;
    '-v' | '--version')
      version
      ;;
    '')
      error 'Missing argument'
      ;;
    *)
      open_project $@
  esac
}


# Run the script
main "$@"
