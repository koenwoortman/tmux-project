#!/usr/bin/env bash

SCRIPT_NAME=${0##*/}
VERSION=0.1.0
PROJECT_DIR=${TMUX_PROJECT_DIR:-"$HOME/.config/tmux-project"}

usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <project name>

options:
  -e, --edit       PROJECT    Edit a tmux-project file
  -h, --help                  Display this help message
  -l, --list                  List known tmux-projects
  -n, --new        PROJECT    Create a new tmux-project file
  -s, --save                  Save current session as tmux-project
  -v, --version               Display the version number

EOF

  exit 0
}

version() {
  cat << EOF
tmux-project ${VERSION}

EOF

  exit 0
}

window_format() {
	local format
  format+="#{window_name}"
	echo "$format"
}

dump_tmux_windows() {
  tmux list-windows -a -F "$(window_format)"
}

capture_tmux_windows() {
  config=''
  windows=$( dump_tmux_windows )

  iteration=1
  for window in $windows; do
    if [[ "$iteration" -eq 1 ]]; then
      config="rename-window $window"
    else
      config+="\nnew-window -n $window"
    fi

    iteration=$((iteration + 1))
  done

  echo "${config}"
}

new_project() {
  # Remove the option parameter
  shift

  project_name=$1

  if [ -z "$project_name" ]; then
    echo "$SCRIPT_NAME: specify a project name: ${SCRIPT_NAME} --new <project name>"
    exit 1
  fi

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    echo "$SCRIPT_NAME: '$project_name' already exists in $PROJECT_DIR"
    exit 1
  fi

  touch "$PROJECT_DIR/$project_name"

  exit 0
}

edit_project() {
  # Remove the option parameter
  shift

  project_name=$1

  if [ -z "$project_name" ]; then
    echo "$SCRIPT_NAME: specify a project: ${SCRIPT_NAME} --edit <project name>"
    exit 1
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    echo "$SCRIPT_NAME: '$project_name' does not exists in $PROJECT_DIR"
    exit 1
  fi

  ${EDITOR:-vi} "$PROJECT_DIR/$project_name"

  exit 0
}

list_projects() {
  ls $PROJECT_DIR
  exit 0
}

save_project() {
  if [ -z "$TMUX" ]; then
    echo "$SCRIPT_NAME: can't store current session if tmux isn't active"
    exit 1
  fi

  project_name=$( tmux display-message -p '#S' )

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    echo "$SCRIPT_NAME: '$project_name' already exists in $PROJECT_DIR"
    exit 1
  fi

  windows=$( capture_tmux_windows )
  echo -e "$windows" >> "$PROJECT_DIR/$project_name"

  echo "$SCRIPT_NAME: saved '$project_name'"

  exit 0
}

# Transform long options to short options
for arg in "$@"; do
  shift
  case "$arg" in
    "--edit")
      set -- "$@" "-e"
      ;;
    "--help")
      set -- "$@" "-h"
      ;;
    "--list")
      set -- "$@" "-l"
      ;;
    "--new")
      set -- "$@" "-n"
      ;;
    "--save")
      set -- "$@" "-s"
      ;;
    "--version")
      set -- "$@" "-v"
      ;;
    *)
      set -- "$@" "$arg"
      ;;
  esac
done

# Parse short options
while getopts "ehlnsv" opt; do
  case "$opt" in
    "e")
      edit_project $@
      ;;
    "h")
      usage
      ;;
    "l")
      list_projects
      ;;
    "n")
      new_project $@
      ;;
    "s")
      save_project
      ;;
    "v")
      version
      ;;
    "?")
      usage >&2
      exit 1
      ;;
  esac
done

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

PROJECT=$1

if [ ! -f "$PROJECT_DIR/$PROJECT" ]; then
  echo "$SCRIPT_NAME: '$PROJECT' not found in $PROJECT_DIR"
  exit 1
fi

if ! tmux has-session -t "$PROJECT" > /dev/null 2>&1; then
  TMUX='' tmux new-session -d -s "$PROJECT"
  xargs -L1 tmux < "$PROJECT_DIR/$PROJECT"
  tmux select-window -t 1
fi

if [ -z "$TMUX" ]; then
  tmux attach -t "$PROJECT"
else
  tmux switch-client -t "$PROJECT"
fi
