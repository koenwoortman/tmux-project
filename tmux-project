#!/usr/bin/env bash

SCRIPT_NAME=${0##*/}
VERSION=0.2.0
PROJECT_DIR=${TMUX_PROJECT_DIR:-"$HOME/.config/tmux-project"}

usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <project name>

options:
  -c, --close     [PROJECT]   Close a tmux session
  -e, --edit       PROJECT    Edit a tmux-project file
  -h, --help                  Display this help message
  -l, --list                  List known tmux-projects
  -n, --new        PROJECT    Create a new tmux-project file
  -r, --remove     PROJECT    Remove a new tmux-project file
  -s, --save                  Save current session as tmux-project
  -v, --version               Display the version number

EOF
}

error() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
  printf "Try '%s --help' for more information.\\n" "${SCRIPT_NAME}"
  exit 1
} >&2

version() {
  cat << EOF
${SCRIPT_NAME} ${VERSION}

EOF
}

window_format() {
	local format
  format+="#{window_name}"
	echo "$format"
}

dump_tmux_windows() {
  tmux list-windows -a -F "$(window_format)"
}

capture_tmux_windows() {
  local config=''
  local windows=$( dump_tmux_windows )

  local iteration=1
  for window in $windows; do
    if [[ "$iteration" -eq 1 ]]; then
      config="rename-window $window"
    else
      config+="\nnew-window -n $window"
    fi

    iteration=$((iteration + 1))
  done

  echo "${config}"
}

new_project() {
  local project_name=$1

  if [ -z "$project_name" ]; then
    error "specify a project name: ${SCRIPT_NAME} --new <project name>"
  fi

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' already exists in $PROJECT_DIR"
  fi

  touch "$PROJECT_DIR/$project_name"
}

edit_project() {
  local project_name=$1

  if [ -z "$project_name" ]; then
    error "specify a project: ${SCRIPT_NAME} --edit <project name>"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    echo "'$project_name' does not exists in $PROJECT_DIR"
  fi

  ${EDITOR:-vi} "$PROJECT_DIR/$project_name"
}

list_projects() {
  ls $PROJECT_DIR
}

save_project() {
  if [ -z "$TMUX" ]; then
    error "can't store current session if tmux isn't active"
  fi

  local project_name=$( tmux display-message -p '#S' )

  if [[ -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' already exists in $PROJECT_DIR"
  fi

  local windows=$( capture_tmux_windows )
  echo -e "$windows" >> "$PROJECT_DIR/$project_name"

  echo "$SCRIPT_NAME: saved '$project_name'"
}

remove_project() {
  local project_name=$1

  if [ -z "$project_name" ]; then
    error "specify a project: ${SCRIPT_NAME} --remove <project name>"
  fi

  if [[ ! -f "$PROJECT_DIR/$project_name" ]]; then
    error "'$project_name' doesn't exists in $PROJECT_DIR"
  fi

  read -p "Are you sure? (y/n) " -n 1 -r
  echo    # Move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm "$PROJECT_DIR/$project_name"
  fi
}

close_project() {
  local project_name=$1

  if [ -z "$project_name" ]; then
    if [ -z "$TMUX" ]; then
      error "No current tmux session"
    fi

    tmux kill-session
  else
    tmux kill-session -t "$project_name"
  fi
}

open_project() {
  if [ $# -ne 1 ]; then
    error "No project specified"
  fi

  local project_name=$1

  if [ ! -f "$PROJECT_DIR/$project_name" ]; then
    error "'$project_name' not found in $PROJECT_DIR"
  fi

  if ! tmux has-session -t "$project_name" > /dev/null 2>&1; then
    TMUX='' tmux new-session -d -s "$project_name"
    xargs -L1 tmux < "$PROJECT_DIR/$project_name"
    tmux select-window -t 1
  fi

  if [ -z "$TMUX" ]; then
    tmux attach -t "$project_name"
  else
    tmux switch-client -t "$project_name"
  fi
}

parse_arguments() {
  local argument=$1

  case "${argument}" in
    '-c' | '--close')
      close_project $2
      ;;
    '-e' | '--edit')
      edit_project $2
      ;;
    '-h' | '--help')
      usage
      exit
      ;;
    '-l' | '--list')
      list_projects
      ;;
    '-n' | '--new')
      new_project $2
      ;;
    '-r' | '--remove')
      remove_project $2
      ;;
    '-s' | '--save')
      save_project $2
      ;;
    '-v' | '--version')
      version
      ;;
    '')
      error 'Missing argument'
      ;;
    *)
      open_project $@
  esac
}

parse_arguments "$@"
